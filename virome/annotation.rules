# -*- mode: Snakemake -*-
#
# Viral contig annotation.
#
# See Readme.md

from pathlib import Path
import csv

from Bio import SeqIO
from Bio import SearchIO



rule tmp_filter_all:
    input:
        expand(
            str(ANNOTATION_FP/'filtered'/'{sample}_filtered_contigs.fa'),
            sample=Samples.keys()
        )

rule tmp_blast:
    input:
        str(ANNOTATION_FP/'blastn'/'bacteria'/'Pulm1BALd_S1.xml')

rule filter_fasta:
    input:
        str(ASSEMBLY_FP/'{sample}_assembly'/'minimo-contigs.fa')
    output:
        fp = str(ANNOTATION_FP/'filtered'/'{sample}_filtered_contigs.fa')
    run:
        n_contigs = 0
        n_kept = 0
        with open(output.fp, 'w') as out:
            for record in SeqIO.parse(input[0], 'fasta'):
                n_contigs += 1
                if len(record) >= Cfg['min_contig_len']:
                    n_kept += 1
                    SeqIO.write(record, out, 'fasta')
        results = "%s: %d of %d contigs kept" % (wildcards.sample, n_kept, n_contigs)
        print(results)
                

rule run_blastn:
    input:
        contigs=str(ANNOTATION_FP/'filtered'/'{sample}_filtered_contigs.fa'),
        db=lambda wildcard: Cfg['nucleotide_dbs'][wildcard.db]
    output:
        str(ANNOTATION_FP/'blastn'/'{db}'/'{sample}.xml')
    shell:
        """
        blastn -query {input.contigs} -db {input.db} \
        -outfmt 5 \
        -num_threads {Cfg[subcores]} -evalue 1e-10 -max_target_seqs 1 \
        -out {output} \
        """

rule report:
    input:
        expand(
            str(ANNOTATION_FP/'blastn'/'{{db}}'/'{sample}.xml'),
            sample=['Pulm1BALd_S1', 'Pulm12BALd_S2'])
    output:
        str(ANNOTATION_FP/'blastn'/'{db}'/'report.tsv')
    run:
        with open(output[0], 'w') as out:
            writer = csv.DictWriter(out, fieldnames=['sample','contig','hit'], delimiter='\t')
            writer.writeheader()
            for infile in input:
                sample = Path(infile).stem
                results = [
                    {'sample':sample,
                     'contig':result.id,
                     'hit':result.hits[0].id}
                    for result in SearchIO.parse(infile, 'blast-xml')
                    if len(result.hits) > 0
                ]
                writer.writerows(results)

rule test_report:
    input:
        str(ANNOTATION_FP/'blastn'/'bacteria'/'report.tsv')



        
        
        
