# -*- mode: Snakemake -*-
#
# Viral contig annotation.
#
# See Readme.md

from pathlib import Path
import csv

from Bio import SeqIO

Cfg['annotation'] = validate_paths(yaml.load(open('annotation/config.yml')))
ANNOTATION_FP = Cfg['output_fp']/Cfg['annotation']['suffix']

rule filter_fasta:
    """Filter contigs by size."""
    
    input:
        str(ASSEMBLY_FP/'{sample}_assembly'/'minimo-contigs.fa')
    output:
        fp = str(ANNOTATION_FP/'filtered'/'{sample}_filtered_contigs.fa')
    run:
        n_contigs = 0
        n_kept = 0
        with open(output.fp, 'w') as out:
            for record in SeqIO.parse(input[0], 'fasta'):
                n_contigs += 1
                if len(record) >= Cfg['min_contig_len']:
                    n_kept += 1
                    SeqIO.write(record, out, 'fasta')
        results = "%s: %d of %d contigs kept" % (wildcards.sample, n_kept, n_contigs)
        print(results)

rule aggregate_results:
    input:
        expand(
            str(ANNOTATION_FP/'{blast_prog}'/'{{db}}'/'{{query}}'/'{{sample}}.xml'),
            blast_prog=['blastp','blastn','blastx'])

        
        
        
