# -*- mode: Snakemake -*-
#
# Illumina quality control rules

rule all_qc:
    """Runs trimmomatic and fastqc on all input files."""
    input:
        TARGET_QC

rule custom_removal:
    input:
        r1 = lambda wildcards: Samples[wildcards.sample]['R1'],
        r2 = lambda wildcards: Samples[wildcards.sample]['R2']
    params:
        r1 = str(QC_FP/'cutadapt'/'{sample}_R1.fastq.gz'),
        r2 = str(QC_FP/'cutadapt'/'{sample}_R2.fastq.gz')
    output:
        gr1 = str(QC_FP/'cutadapt'/'{sample}_R1.fastq.gz'),
        gr2 = str(QC_FP/'cutadapt'/'{sample}_R2.fastq.gz')
    run:
        fwd_adapters = Cfg['qc']['fwd_adapters']
        rev_adapters = Cfg['qc']['rev_adapters']
        if fwd_adapters or rev_adapters:
            overlap = float('inf')
            if fwd_adapters:
                overlap = min(min(len(a) for a in fwd_adapters), overlap)
                fwd_adapter_str = " ".join(expand(
                    "-b {adapter}", adapter=Cfg['qc']['fwd_adapters']))
            if rev_adapters:
                overlap = min(min(len(a) for a in rev_adapters), overlap)
                rev_adapter_str = " ".join(expand(
                    "-B {adapter}", adapter=Cfg['qc']['rev_adapters']))
            shell("""
            cutadapt --discard-trimmed -O {overlap} \
            {fwd_adapter_str} {rev_adapter_str} \
            -o {params.r1} -p {params.r2} \
            {input.r1} {input.r2}
            gzip {params.r1}
            gzip {params.r2}
            """)
        else:
            shell("""
            ln -s {input.r1} {output.gr1} && ln -s {input.r2} {output.gr2}
            """)

        
rule trimmomatic:
    input:
        r1 = str(QC_FP/'cutadapt'/'{sample}_R1.fastq.gz'),
        r2 = str(QC_FP/'cutadapt'/'{sample}_R2.fastq.gz')
    output:
        pair_r1 = str(QC_FP/'paired'/'{sample}_R1.fastq.gz'),
        pair_r2 = str(QC_FP/'paired'/'{sample}_R2.fastq.gz'),
        unpair_r1 = str(QC_FP/'unpaired'/'{sample}_R1_unpaired.fastq.gz'),
        unpair_r2 = str(QC_FP/'unpaired'/'{sample}_R2_unpaired.fastq.gz'),
        log = str(QC_FP/'log'/'trimmomatic'/'{sample}.out')
    params:
        sw_start = Cfg['qc']['slidingwindow'][0],
        sw_end = Cfg['qc']['slidingwindow'][1]
    threads:
        Cfg['qc']['threads']
    shell:
        """
        trimmomatic \
        PE -threads {threads} -phred33 \
        {input.r1} {input.r2} \
        {output.pair_r1} {output.unpair_r1} \
        {output.pair_r2} {output.unpair_r2} \
        ILLUMINACLIP:{Cfg[qc][adapter_fp]}:2:30:10:8:true \
        LEADING:{Cfg[qc][leading]} \
        TRAILING:{Cfg[qc][trailing]} \
        SLIDINGWINDOW:{params.sw_start}:{params.sw_end} \
        MINLEN:{Cfg[qc][minlen]} &> {output.log}\
        """

rule fastqc:
    input:
        r1 = str(QC_FP/'paired'/'{sample}_R1.fastq.gz'),
        r2 = str(QC_FP/'paired'/'{sample}_R2.fastq.gz')
    output:
        expand(
            str(QC_FP/'paired'/'{{sample}}_{rp}_fastqc/fastqc_data.txt'),
            rp=['R1', 'R2'])
    shell: "fastqc {input.r1} {input.r2} -extract"

rule mask_low_complexity:
    input:
        str(QC_FP/'paired'/'{sample}_{rp}.fastq.gz')
    output:
        str(QC_FP/'masked'/'{sample}_{rp}.fastq.gz')
    run:
        if Cfg['qc']['mask_low_complexity']:
            shell("""
            kz --mask -t {Cfg[qc][kz_threshold]} -w {Cfg[qc][kz_window]} \
            < <(gzip -cd {input}) | gzip -c > {output}
            """)
        else:
            shell("ln -s {input} {output}")
            
