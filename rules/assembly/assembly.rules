# -*- mode: Snakemake -*-
#
# Contig building and other assembly rules
#
# Requires IDBA_UD and CAP3.

rule all_assembly:
    """Build contigs for all samples."""
    input:
        TARGET_ASSEMBLY

rule merge_fq:
    input:
        r1 = str(QC_FP/'decontam'/'{sample}_R1.fastq.gz'),
        r2 = str(QC_FP/'decontam'/'{sample}_R2.fastq.gz')
    output:
        str(ASSEMBLY_FP/'merged_reads'/'{sample}_merged.fasta')
    shell: "fq2fa --merge --filter <(gunzip -c {input.r1}) <(gunzip -c {input.r2}) {output}"


rule idba_ud:
    input:
        str(ASSEMBLY_FP/'merged_reads'/'{sample}_merged.fasta')
    output:
    	str(ASSEMBLY_FP/'idba_ud'/'{sample}'/'contig.fa')
    log:
        str(ASSEMBLY_FP/'log'/'idba_ud'/'{sample}.out')
    params:
        out_fp = str(ASSEMBLY_FP/'idba_ud'/'{sample}')
    threads:
        Cfg['assembly']['threads']
    shell:
        """
        idba_ud -l {input} -o {params.out_fp} \
        --num_threads {threads} --pre_correction &> {log} || \
        if [ ! -a {output} ]; then cp {params.out_fp}/contig-100.fa {output}; fi
        """

rule megahit:
    input:
        r1 = str(QC_FP/'decontam'/'{sample}_R1.fastq.gz'),
        r2 = str(QC_FP/'decontam'/'{sample}_R2.fastq.gz')
    output:
        str(ASSEMBLY_FP/'megahit'/'.save_{sample}')
    params:
        out_fp = str(ASSEMBLY_FP/'megahit'/'{sample}_asm')
    shell:
        """
        megahit -1 {input.r1} -2 {input.r2} -o {params.out_fp} && touch {output} 
        """

rule cap3:
    input:
        megahit = str(ASSEMBLY_FP/'megahit'/'.save_{sample}'),
        cap3 = str(Cfg['assembly']['cap3_fp']/'cap3')
    output:
        str(ASSEMBLY_FP/'cap3'/'{sample}'/'cap3-contigs.fa')
    params: 
        contig = str(ASSEMBLY_FP/'megahit'/'{sample}_asm'/'final.contigs.fa')
    log:
        str(ASSEMBLY_FP/'log'/'cap3'/'{sample}.out')
    shell:
        """
        {input.cap3} {params.contig} &> {log}
        """

rule save_intermediates:
    input:
        M = str(ASSEMBLY_FP/'megahit'/'.save_{sample}'),
        C = str(ASSEMBLY_FP/'cap3'/'{sample}'/'cap3-contigs.fa')
    output:
        M = str(ASSEMBLY_FP/'{sample}_assembly'/'contig.fa'),
        C = str(ASSEMBLY_FP/'{sample}_assembly'/'cap3-contigs.fa'),
        sentinel = str(ASSEMBLY_FP/'{sample}_assembly'/'.save')
    params:
        M = str(ASSEMBLY_FP/'megahit'/'{sample}_asm'/'final.contigs.fa')
    shell:
        """
        cp {params.M} {output.M} && cp {input.C} {output.C} && \
        touch {output.sentinel}
        """

rule final_filter:
    input:
        str(ASSEMBLY_FP/'{sample}_assembly'/'cap3-contigs.fa')
    output:
        str(ASSEMBLY_FP/'{sample}_assembly'/'final-contigs.fa')
    params:
        len = Cfg['assembly']['min_length']
    log:
        str(ASSEMBLY_FP/'log'/'vsearch'/'{sample}.log')
    run:
        filename = os.path.basename(input[0])
        shell(
        """
        if [ -s {input} ]
        then
            vsearch --sortbylength {input} \
            --relabel {filename} --minseqlength {params.len} \
            --output {input}.{params.len}f &> {log} && \
            cp {input}.{params.len}f {output}
        else
            cp {input} {output} &> {log}
        fi
        """)

rule clean_assembly:
    input:
        M = str(ASSEMBLY_FP/'megahit'),
        C = str(ASSEMBLY_FP/'cap3')
    shell:
        """
        rm -rf {input.M} && \
        rm -rf {input.C} && \
        echo "Cleanup assembly finished."
        """
