# -*- mode: Snakemake -*-
#
# ReportGeneration rules

import pandas
from io import StringIO

rule all_reports:
    input:
        TARGET_REPORT

def parse_trim_summary(filename):
    with open(filename) as f:
        for line in f:
            if line.startswith('Input Read Pairs'):
                vals = re.findall('\D+\: (\d+)', line)
                keys = ('input', 'both_kept','fwd_only','rev_only','dropped')
                return(dict(zip(keys, vals)))

def parse_decontam_json(jsonfile):
    with open(jsonfile) as f:
        data = json.load(f)
    return(data['data'])

rule preprocess_report:
    """Combines the information from multiple preprocessing steps"""
    input:
        trim_files = expand(str(QC_FP/'log'/'trimmomatic'/'{sample}.out'), sample=Samples.keys()),
        json_files = expand(str(QC_FP/'log'/'decontam-human'/'{sample}_summary.json'), sample=Samples.keys())
    output:
        str(QC_FP/'preprocess_summary.tsv')
    run:
        summary_list = []
        for i in range(len(input.trim_files)):
            tfile = input.trim_files[i]
            jfile = input.json_files[i]
            tname = os.path.basename(tfile).split('.out')[0]
            jname = os.path.basename(jfile).split('_summary.json')[0]
            if tname == jname:
                merged_dict = {**parse_trim_summary(tfile), **parse_decontam_json(jfile)}
                summary_list.append(pandas.DataFrame(merged_dict, index=[tname]))
            else:
                raise ValueError('Unmatched qc and decontam files for: %s' % tname)
        reports = pandas.concat(summary_list)
        reports.to_csv(output[0], sep='\t', index_label='Samples')

def parse_fastqc_quality(filename):
    with open(filename) as f:
        report = f.read()
    tableString = re.search('\>\>Per base sequence quality.*?\n(.*?)\n\>\>END_MODULE', report, re.DOTALL).group(1)

    f_s = StringIO(tableString)
    df = pandas.read_csv(f_s, sep='\t', usecols=['#Base', 'Mean'], index_col='#Base')
    sample_name = os.path.basename(filename.split('_fastqc')[0])
    df.columns=[sample_name]
    f_s.close()
    return(df)

rule fastqc_report:
    """ make fastqc reports """
    input:
        files = expand(str(QC_FP/'paired'/'{sample}_{rp}_fastqc/fastqc_data.txt'),sample=Samples.keys(),rp=['R1','R2'])
    output:
        str(QC_FP/'fastqc_quality.tsv')
    run:
        quality_list = []
        for file in input.files:
            with open(file) as f:
                quality_list.append(parse_fastqc_quality(file))
        quality_table = pandas.concat(quality_list, axis=1).transpose()
        quality_table.to_csv(output[0],sep="\t",index_label="Samples")

