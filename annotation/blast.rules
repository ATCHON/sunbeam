# -*- mode: Snakemake -*-
#
# Viral contig annotation:
# 	Rules for BLASTing against databases
#
# See Readme.md

from Bio import SearchIO
from xml.etree.ElementTree import ParseError

def pick_db(wildcard):
    print(wildcard.db)
    print(Cfg['protein_dbs'][wildcard.db])
    return Cfg['protein_dbs'][wildcard.db]
    
    

rule run_blastn:
    """Run BLASTn against a given database and write the results to XML."""
    
    input:
        contigs=str(ANNOTATION_FP/'filtered'/'{sample}_filtered_contigs.fa'),
        db=lambda wildcard: Cfg['nucleotide_dbs'][wildcard.db]
    output:
        str(ANNOTATION_FP/'blastn'/'{db}'/'{contigs}'/'{sample}.xml')
    shell:
        """
        blastn \
        -query {input.contigs} \
        -db {input.db} \
        -outfmt 5 \
        -num_threads {Cfg[subcores]} \
        -evalue 1e-10 \
        -max_target_seqs 1 \
        -out {output} \
        """

rule run_blastp:
    """
    Run BLASTp on translated genes against a target db and write to XML.
    """
    input:
        genes=str(ANNOTATION_FP/'genes'/'{orf_finder}'/'{sample}_genes_prot11.fa'),
        db=lambda wildcard: Cfg['protein_dbs'][wildcard.db]
    output:
        str(ANNOTATION_FP/'blastp'/'{db}'/'{orf_finder}'/'{sample}.xml')
    shell:
        """
        blastp \
        -query {input.genes} \
        -db {input.db} \
        -outfmt 5 \
        -num_threads {Cfg[subcores]} \
        -evalue 1e-10 \
        -max_target_seqs 1 \
        -out {output} \
        """

rule run_blastx:
    """
    Run BLASTx on untranslated genes against a target db and write to XML.
    """
    input:
        # output/virome/genes/mga/HUP3D03BALc_S92_genes_nucl.fa
        genes=str(ANNOTATION_FP/'genes'/'{orf_finder}'/'{sample}_genes_nucl.fa'),
        db=pick_db
    output:
        # output/virome/blastx/aclame/mga/HUP3D03balc_S92.xml
        str(ANNOTATION_FP/'blastx'/'{db}'/'{orf_finder}'/'{sample}.xml')
    shell:
        """
        blastx \
        -query {input.genes} \
        -db {input.db} \
        -outfmt 5 \
        -num_threads {Cfg[subcores]} \
        -evalue 1e-10 \
        -max_target_seqs 1 \
        -out {output} \
        """
        
rule blast_report:
    """Create a summary of results from a BLAST call."""    
    input:
        expand(
            str(ANNOTATION_FP/'{{blast_prog}}'/'{{db}}'/'{{query}}'/'{sample}.xml'),
            sample=Samples.keys())
    output:
        str(ANNOTATION_FP/'{blast_prog}'/'{db}'/'{query}'/'report.tsv')
    run:
        with open(output[0], 'w') as out:
            blast_summary(input, out)

rule _test_blastx:
    input:
        expand(str(ANNOTATION_FP/'blastx'/'aclame'/'mga'/'{sample}.xml'),
               sample=Samples.keys())
    
rule _test_blast_report:
    input:
        str(ANNOTATION_FP/'blastx'/'aclame'/'mga'/'report.tsv')
