# -*- mode: Snakemake -*-
#
# Rules for running Kraken

rule kraken_classify:
    input:
        r1=str(QC_FP/'paired'/'{sample}_R1.fastq'),
        r2=str(QC_FP/'paired'/'{sample}_R2.fastq')
    output:
        str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv')
    shell:
        """
        kraken \
        --db {Cfg[classify][kraken_db_fp]} \
        --threads {Cfg[all][subcores]} \
        --paired \
        --fastq-input \
        {input.r1} {input.r2} > {output}
        """

rule kraken_report:
    input:
        str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv')
    output:
        str(CLASSIFY_FP/'kraken'/'{sample}-taxa.tsv')
    shell:
        """
        kraken-report \
        --db {Cfg[classify][kraken_db_fp]} \
        {input} > {output}
        """

rule kraken_mpa_report:
    input:
        str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv')
    output:
        str(CLASSIFY_FP/'kraken'/'{sample}-mpa.tsv')
    shell:
        """
        kraken-mpa-report \
        --db {Cfg[classify][kraken_db_fp]} \
        {input} > {output}
        """

rule kraken_aggregate_report:
    input:
        expand(str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv'),
        sample=Samples.keys())
    output:
        str(CLASSIFY_FP/'kraken'/'{sample}-mpa.tsv')
    shell:
        """
        kraken-mpa-report \
        --db {Cfg[classify][kraken_db_fp]} \
        {' '.join(s for s in input)} > {output}
        """
        
rule kraken_krona:
    input:
        str(CLASSIFY_FP/'kraken'/'{sample}-taxa.tsv')
    output:
        str(CLASSIFY_FP/'kraken'/'krona'/'{sample}-krona.html')
    shell:
        """
        ktImportTaxonomy \
        -o {output} \
        -t 5 \
        -m 3 \
        -tax {Cfg[classify][taxa_db_fp]} \
        {input}
        """

rule _test_kraken:
    input:
        expand(str(CLASSIFY_FP/'kraken'/'krona'/'{sample}-krona.html'),
               sample=Samples.keys())
    
